<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\flash\PJ2000ST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\flash\PJ2000ST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Mar 14 12:33:35 2016
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vGSM_GPRS_Task &rArr; AMPM_GSM_MainTask &rArr; AMPM_GSM_Startup &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ea]">memp_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11a]">sys_sem_wait</a><BR>
 <LI><a href="#[12c]">netconn_delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12c]">netconn_delete</a><BR>
 <LI><a href="#[1aa]">PPP__ThisLayerFinished</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">PPP__ManageState</a><BR>
 <LI><a href="#[1a9]">PPP__ThisLayerUp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">PPP__ManageState</a><BR>
 <LI><a href="#[1a5]">PPP__SendConfigReq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">PPP__ManageState</a><BR>
 <LI><a href="#[1a3]">PPP__ThisLayerDown</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">PPP__ManageState</a><BR>
 <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[78]">Ampm_CallListSetEmpty</a> from ampm_gsm_call.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[4f]">Ampm_GSM_GetATI</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[21c]">Ampm_GSM_GetIMEI</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[21d]">Ampm_GSM_GetSimCID</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[5f]">Ampm_GetCeer</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[5e]">Ampm_GetListOfCurrentCall</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[6c]">Ampm_GetServiceCenterNumber</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[65]">Ampm_GsmATM1EndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[60]">Ampm_GsmCHLD_1X_Callback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[6f]">Ampm_GsmCREG</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[64]">Ampm_GsmCallDialEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[5d]">Ampm_GsmCallDialStartCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[61]">Ampm_GsmCallEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[50]">Ampm_GsmGetCSQ</a> from ampm_gsm_common.o(.text) referenced from ampm_gsm_common.o(.constdata)
 <LI><a href="#[50]">Ampm_GsmGetCSQ</a> from ampm_gsm_common.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[5c]">Ampm_GsmMainATPhaseFinished</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[5b]">Ampm_GsmMainCallPhaseFinished</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[5a]">Ampm_GsmRecvCallback</a> from ampm_gsm_io.o(.text) referenced 40 times from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[5a]">Ampm_GsmRecvCallback</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_io.o(.text)
 <LI><a href="#[59]">Ampm_GsmSendCallback</a> from ampm_gsm_io.o(.text) referenced 40 times from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[59]">Ampm_GsmSendCallback</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_io.o(.text)
 <LI><a href="#[6b]">Ampm_GsmSmsRecv0</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[69]">Ampm_GsmSmsRecv1</a> from ampm_gsm_sms.o(.text) referenced 2 times from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[6a]">Ampm_GsmSmsRecv2</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[68]">Ampm_GsmSmsRecvCallback_CMGD</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[67]">Ampm_GsmSmsRecvCallback_CMGR</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[72]">Ampm_GsmSmsSendCallback_CMGF</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[6d]">Ampm_GsmSmsSendCallback_CMGS</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[71]">Ampm_GsmSmsSendCallback_CSCA</a> from ampm_gsm_sms.o(.text) referenced 2 times from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[6e]">Ampm_GsmSmsSendMessageCallback</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[70]">Ampm_GsmSmsSent</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[62]">Ampm_GsmVoiceCallCheckCeerEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[63]">Ampm_GsmVoiceCallCheckStateEndCallback</a> from ampm_gsm_call.o(.text) referenced from ampm_gsm_call.o(.constdata)
 <LI><a href="#[41]">Ampm_MainSmsRecvCallback</a> from main.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[81]">Ampm_MainSwithToIdle</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[77]">Ampm_SMS_Process</a> from ampm_gsm_sms.o(.text) referenced 3 times from at_command_parser.o(.constdata)
 <LI><a href="#[76]">Ampm_SMS_ReadMsg</a> from ampm_gsm_sms.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[75]">Ampm_SMS_URC_Incomming</a> from ampm_gsm_sms.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[51]">Ampm_SetCmdOK</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[73]">Ampm_URC_CLIP_Process</a> from at_command_parser.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[74]">Ampm_URC_RING_Process</a> from at_command_parser.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[66]">DialupAtCallback0</a> from ampm_gsm_dial_up.o(.text) referenced from ampm_gsm_dial_up.o(.constdata)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from main.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from main.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">RTCAlarm_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from main.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from dtmf_app.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from uart1.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from uart3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[52]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[54]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[55]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[53]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[58]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[58]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[6]">do_accept</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[2]">do_bind</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[a]">do_close</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[3]">do_connect</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[49]">do_connected</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[1]">do_delconn</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[4]">do_disconnect</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[5]">do_listen</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[0]">do_newconn</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[8]">do_recv</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[7]">do_send</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[9]">do_write</a> from api_msg.o(.text) referenced 2 times from api_msg.o(.data)
 <LI><a href="#[48]">err_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[4a]">event_callback</a> from sockets.o(.text) referenced 2 times from sockets.o(.text)
 <LI><a href="#[57]">fputc</a> from dbg.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[56]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[40]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[47]">poll_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[4d]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[4e]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[45]">recv_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[179]">resolv_appcall</a> from resolv.o(.text) referenced from resolv.o(.text)
 <LI><a href="#[46]">sent_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[44]">sswt_handler</a> from sys.o(.text) referenced from sys.o(.text)
 <LI><a href="#[4b]">tcp_pcb_appcall</a> from tcpip_rtos.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[4c]">tcp_recv_null</a> from tcpip_rtos.o(.text) referenced from tcpip_rtos.o(.text)
 <LI><a href="#[c0]">vAmpmNetTestTask4</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[cd]">vGSM_GPRS_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[11]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">vTcpIpTask</a> from tcp_ip_task.o(.text) referenced from main.o(.text)
 <LI><a href="#[42]">vTcpIpTaskInit</a> from tcp_ip_task.o(.text) referenced from main.o(.text)
 <LI><a href="#[13]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">xPortSysTickHandler</a> from port.o(.text) referenced from startup_stm32f10x_md.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[29a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[29c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[29d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[29e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[29f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11]"></a>vPortSVCHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f0]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[13]"></a>xPortPendSVHandler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1c6]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[2a0]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[5c]"></a>Ampm_GsmMainATPhaseFinished</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmMainATPhaseFinished &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>Ampm_GsmMainCallPhaseFinished</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.constdata)
</UL>
<P><STRONG><a name="[2a1]"></a>Ampm_GsmIsWorking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>Ampm_Gsm_IsIdle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ampm_gsm_main_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCheckList_IsEmpty
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_GetPhase
</UL>

<P><STRONG><a name="[2a2]"></a>Ampm_GsmIsGood</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>Ampm_MainSwithToIdle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_MainSwithToIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>Ampm_GsmGetPhase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>AMPM_GSM_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AMPM_GSM_Init &rArr; PPP_SetAuthentication
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetAuthentication
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSetApn
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
</UL>

<P><STRONG><a name="[87]"></a>AMPM_GSM_MainTask</STRONG> (Thumb, 1274 bytes, Stack size 24 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AMPM_GSM_MainTask &rArr; AMPM_GSM_Startup &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Manage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetConnect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_IsLinked
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_IsDead
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_Wakeup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallStartRecvCall
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCheckList_IsEmpty
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_StartRecvSms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_GetPhase
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingTimer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingReset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingProcess
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingEnable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGotoCmdMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_Reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_IsOk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_IsDone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
</UL>

<P><STRONG><a name="[4f]"></a>Ampm_GSM_GetATI</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_GSM_GetATI &rArr; InitFindData
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetAuthenticationLogin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>TIMER2_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[b3]"></a>SysInit</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = SysInit &rArr; ampm_f_write &rArr; ampm_f_find_free_sector &rArr; ampm_f_file_format_check &rArr; ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_On
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>vAmpmNetTestTask4</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vAmpmNetTestTask4 &rArr; lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>vGSM_GPRS_Task</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = vGSM_GPRS_Task &rArr; AMPM_GSM_MainTask &rArr; AMPM_GSM_Startup &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrLed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallSetup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallSetAction
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCancel
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = main &rArr; SysInit &rArr; ampm_f_write &rArr; ampm_f_find_free_sector &rArr; ampm_f_file_format_check &rArr; ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[db]"></a>vAmpmNetTestTask</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[e1]"></a>vAmpmNetTestTask1</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[2a4]"></a>vAmpmNetTestTask2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>Ampm_MainSmsRecvCallback</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Ampm_MainSmsRecvCallback &rArr; Ampm_Sms_SendMsg &rArr; Ampm_SmsAddMsg &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetRinging
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM2_IRQHandler &rArr; DTMF_Task &rArr; DTMF_Detect &rArr; DTMF_digit &rArr; Goertzel
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Task
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrLed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>vTcpIpTaskInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_ip_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>tcpip_thread</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp_ip_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpip_thread &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
</UL>

<P><STRONG><a name="[43]"></a>vTcpIpTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tcp_ip_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTcpIpTask &rArr; tcpip_thread &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>tcpip_apimsg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp_ip_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
</UL>

<P><STRONG><a name="[d8]"></a>tcpip_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tcp_ip_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpip_init &rArr; sys_mbox_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>LedSetStatus</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LedSetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[b7]"></a>LedInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedInit &rArr; LedSetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[ef]"></a>LedCtr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrLed
</UL>

<P><STRONG><a name="[d3]"></a>CtrLed</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CtrLed
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
</UL>

<P><STRONG><a name="[2a5]"></a>ADC_Task</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, adc_task.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>ADC_TaskDeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_TaskDeInit &rArr; ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[b8]"></a>ADC_TaskInit</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, adc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADC_TaskInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[57]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[105]"></a>DbgCfgPrintf</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, dbg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[ee]"></a>sys_mbox_new</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_mbox_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[108]"></a>sys_mbox_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_mbox_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[ed]"></a>sys_mbox_post</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
</UL>

<P><STRONG><a name="[e8]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>

<P><STRONG><a name="[10e]"></a>sys_sem_new</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
</UL>

<P><STRONG><a name="[111]"></a>sys_arch_sem_wait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>

<P><STRONG><a name="[112]"></a>sys_sem_signal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sswt_handler
</UL>

<P><STRONG><a name="[113]"></a>sys_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_sem_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
</UL>

<P><STRONG><a name="[d4]"></a>sys_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>sys_arch_timeouts</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_arch_timeouts
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>

<P><STRONG><a name="[116]"></a>sys_thread_new</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[117]"></a>sys_arch_protect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[118]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[119]"></a>sys_mbox_fetch</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[11a]"></a>sys_sem_wait</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait_timeout
</UL>

<P><STRONG><a name="[11b]"></a>sys_timeout</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait_timeout
</UL>

<P><STRONG><a name="[11c]"></a>sys_untimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait_timeout
</UL>

<P><STRONG><a name="[11d]"></a>sys_sem_wait_timeout</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
</UL>

<P><STRONG><a name="[11e]"></a>sys_msleep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait_timeout
</UL>

<P><STRONG><a name="[d6]"></a>memp_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = memp_init &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>memp_malloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>

<P><STRONG><a name="[ea]"></a>memp_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = memp_free &rArr;  sys_sem_wait (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>

<P><STRONG><a name="[11f]"></a>netbuf_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = netbuf_new &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[e0]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[121]"></a>netbuf_alloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[123]"></a>netbuf_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[124]"></a>netbuf_ref</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[125]"></a>netbuf_chain</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[152]"></a>netbuf_len</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, api_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[2a6]"></a>netbuf_data</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>netbuf_next</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>netbuf_first</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>netbuf_copy_partial</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netbuf_copy_partial
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_copy
</UL>

<P><STRONG><a name="[127]"></a>netbuf_copy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_copy_partial
</UL>

<P><STRONG><a name="[153]"></a>netbuf_fromaddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[154]"></a>netbuf_fromport</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[129]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_callback
</UL>

<P><STRONG><a name="[dc]"></a>netconn_new</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask
</UL>

<P><STRONG><a name="[12b]"></a>netconn_new_with_callback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = netconn_new_with_callback &rArr; netconn_new_with_proto_and_callback &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[12c]"></a>netconn_delete</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = netconn_delete &rArr;  netconn_delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[155]"></a>netconn_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[14d]"></a>netconn_peer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[15c]"></a>netconn_addr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>

<P><STRONG><a name="[12d]"></a>netconn_bind</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[dd]"></a>netconn_connect</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_connect &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[12e]"></a>netconn_disconnect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_disconnect &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[12f]"></a>netconn_listen</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[130]"></a>netconn_accept</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[df]"></a>netconn_recv</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_recv &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[131]"></a>netconn_send</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_send &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[de]"></a>netconn_write</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_write &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask
</UL>

<P><STRONG><a name="[132]"></a>netconn_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;api_msg_post
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_fetch
</UL>

<P><STRONG><a name="[2a9]"></a>netconn_err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>api_msg_input</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = api_msg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[12a]"></a>api_msg_post</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[d5]"></a>mem_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>mem_free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_reallocm
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[13f]"></a>mem_realloc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_reallocm
</UL>

<P><STRONG><a name="[140]"></a>mem_malloc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_reallocm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[141]"></a>mem_reallocm</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d7]"></a>pbuf_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pbuf_init &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>pbuf_free</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
</UL>

<P><STRONG><a name="[122]"></a>pbuf_alloc</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
</UL>

<P><STRONG><a name="[144]"></a>pbuf_realloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[2aa]"></a>pbuf_header</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_queue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[145]"></a>pbuf_cat</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[126]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
</UL>

<P><STRONG><a name="[147]"></a>pbuf_queue</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[2ac]"></a>pbuf_dequeue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>pbuf_take</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[149]"></a>pbuf_dechain</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[14c]"></a>lwip_accept</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_peer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[14e]"></a>lwip_bind</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
</UL>

<P><STRONG><a name="[c3]"></a>lwip_close</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr;  netconn_delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[c6]"></a>lwip_connect</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[150]"></a>lwip_listen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen
</UL>

<P><STRONG><a name="[151]"></a>lwip_recvfrom</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_type
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_fromport
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_fromaddr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_copy_partial
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_len
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
</UL>

<P><STRONG><a name="[cc]"></a>lwip_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwip_read &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[e3]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
</UL>

<P><STRONG><a name="[e2]"></a>lwip_send</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lwip_send &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_type
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[156]"></a>lwip_sendto</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_peer
</UL>

<P><STRONG><a name="[c2]"></a>lwip_socket</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwip_socket &rArr; netconn_new_with_callback &rArr; netconn_new_with_proto_and_callback &rArr; api_msg_post &rArr; tcpip_apimsg &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_callback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[ca]"></a>lwip_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_write &rArr; lwip_send &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[158]"></a>lwip_select</STRONG> (Thumb, 420 bytes, Stack size 88 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait_timeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>

<P><STRONG><a name="[159]"></a>lwip_shutdown</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[15a]"></a>lwip_getpeername</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_peer
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[15b]"></a>lwip_getsockname</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_addr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[15d]"></a>lwip_getsockopt</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[15e]"></a>lwip_setsockopt</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[15f]"></a>lwip_ioctl</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[c5]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[161]"></a>inet_chksum_pseudo</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>

<P><STRONG><a name="[162]"></a>inet_chksum</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>

<P><STRONG><a name="[163]"></a>inet_chksum_pbuf</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>

<P><STRONG><a name="[165]"></a>htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>

<P><STRONG><a name="[164]"></a>inet_aton</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
</UL>

<P><STRONG><a name="[c4]"></a>inet_addr</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inet_addr &rArr; inet_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[2ad]"></a>inet_ntoa</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, inet.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[166]"></a>ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>

<P><STRONG><a name="[2ae]"></a>uip_setipid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>uip_add32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[169]"></a>uip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_unlisten
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_listen
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_connect
</UL>

<P><STRONG><a name="[167]"></a>uip_chksum</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>

<P><STRONG><a name="[16a]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[16c]"></a>uip_tcpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[16d]"></a>uip_udpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1b3]"></a>uip_init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[16e]"></a>uip_connect</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[16f]"></a>uip_udp_new</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>

<P><STRONG><a name="[18a]"></a>uip_unlisten</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unlisten
</UL>

<P><STRONG><a name="[188]"></a>uip_listen</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
</UL>

<P><STRONG><a name="[172]"></a>uip_process</STRONG> (Thumb, 3824 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_process &rArr; uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_uipcall
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[2af]"></a>uip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>uip_send</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uip_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[179]"></a>resolv_appcall</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = resolv_appcall &rArr; newdata &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resolv.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>resolv_query</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, resolv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Query
</UL>

<P><STRONG><a name="[17c]"></a>resolv_lookup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, resolv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Lookup
</UL>

<P><STRONG><a name="[2b0]"></a>resolv_getserver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, resolv.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>resolv_conf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = resolv_conf &rArr; udp_new &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Manage
</UL>

<P><STRONG><a name="[18b]"></a>resolv_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Manage
</UL>

<P><STRONG><a name="[180]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_SetHostAddr
</UL>

<P><STRONG><a name="[2b1]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[182]"></a>timer_expired</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[2b2]"></a>Domain_IpCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uip_ppp.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>UIP_SetHostAddr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UIP_SetHostAddr &rArr; timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerUp
</UL>

<P><STRONG><a name="[1af]"></a>UIP_Input</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uip_ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
</UL>

<P><STRONG><a name="[184]"></a>UIP_Periodic</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, uip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UIP_Periodic &rArr; uip_process &rArr; uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[173]"></a>tcpip_uipcall</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpip_uipcall
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[186]"></a>tcp_connect</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_connect &rArr; uip_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_connect
</UL>

<P><STRONG><a name="[17f]"></a>udp_new</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udp_new &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
</UL>

<P><STRONG><a name="[187]"></a>tcp_listen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_listen
</UL>

<P><STRONG><a name="[189]"></a>tcp_unlisten</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_unlisten
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_unlisten
</UL>

<P><STRONG><a name="[195]"></a>tcp_attach</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcpip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_unregister
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_connect
</UL>

<P><STRONG><a name="[98]"></a>RESOLVER_Reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, resolver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[97]"></a>RESOLVER_Manage</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, resolver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RESOLVER_Manage &rArr; resolv_conf &rArr; udp_new &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[18c]"></a>RESOLVER_Lookup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, resolver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_lookup
</UL>

<P><STRONG><a name="[18d]"></a>RESOLVER_Query</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, resolver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
</UL>

<P><STRONG><a name="[176]"></a>resolv_found</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, resolver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[2b3]"></a>tcp_tmr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcpip_rtos.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>tcp_sndbuf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcpip_rtos.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>tcp_pcb_appcall</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_pcb_appcall &rArr; newdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relisten
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acked
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_event
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_attach
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>tcp_pcb_connect</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tcp_pcb_connect &rArr; tcp_connect &rArr; uip_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_attach
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[197]"></a>tcp_pcb_listen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcpip_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>

<P><STRONG><a name="[198]"></a>tcp_pcb_unlisten</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcpip_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unlisten
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_unregister
</UL>

<P><STRONG><a name="[13b]"></a>tcp_pcb_send</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_send_str
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[199]"></a>tcp_pcb_send_str</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tcpip_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[2b5]"></a>tcp_pcb_close</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tcpip_rtos.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>tcp_pcb_unregister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcpip_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_unlisten
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_attach
</UL>

<P><STRONG><a name="[19c]"></a>tcp_alloc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_alloc &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
</UL>

<P><STRONG><a name="[134]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>

<P><STRONG><a name="[139]"></a>tcp_new</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[135]"></a>tcp_recv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>

<P><STRONG><a name="[136]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>

<P><STRONG><a name="[138]"></a>tcp_err</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>

<P><STRONG><a name="[137]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>

<P><STRONG><a name="[83]"></a>PPP_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSwithToIdle
</UL>

<P><STRONG><a name="[86]"></a>PPP_SetAuthentication</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPP_SetAuthentication
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
</UL>

<P><STRONG><a name="[af]"></a>PPP_SetAuthenticationLogin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
</UL>

<P><STRONG><a name="[9d]"></a>PPP_SetConnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[94]"></a>PPP_IsDead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[185]"></a>PPP_Send</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PPP_Send &rArr; COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCS_Get
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigAck
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigNackRej
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermAck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendEchoReply
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[1b0]"></a>PPP__In</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PPP__In &rArr; PPP__ProcessPacket &rArr; PPP__ManageState &rArr; PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCS_Get
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[93]"></a>PPP_ManageLink</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PPP_ManageLink &rArr; PPP__In &rArr; PPP__ProcessPacket &rArr; PPP__ManageState &rArr; PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CarrierDetected
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Timer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[1b5]"></a>PPP_ReInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ppp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
</UL>

<P><STRONG><a name="[95]"></a>PPP_IsLinked</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[19f]"></a>FCS_Get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
</UL>

<P><STRONG><a name="[2b6]"></a>FCS_Calculate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fcs.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>xQueueGenericReset</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[107]"></a>xQueueGenericCreate</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[10b]"></a>xQueueGenericSend</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[1c4]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1c7]"></a>xQueueGiveFromISR</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[10d]"></a>xQueueGenericReceive</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[1ca]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[1cb]"></a>xQueuePeekFromISR</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[109]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[1cc]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[2b7]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>vQueueDelete</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[2b8]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>xTaskGenericCreate</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>vTaskDelete</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[1d7]"></a>xTaskIncrementTick</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1c3]"></a>xTaskResumeAll</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1c0]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1da]"></a>vTaskDelayUntil</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[c7]"></a>vTaskDelay</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[1db]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1dc]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[1dd]"></a>vTaskPrioritySet</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[7b]"></a>vTaskSwitchContext</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[1de]"></a>vTaskSuspend</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[1df]"></a>vTaskResume</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[1e1]"></a>xTaskResumeFromISR</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[da]"></a>vTaskStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>vTaskEndScheduler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[10c]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[2ba]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1e7]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1b7]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1e8]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>

<P><STRONG><a name="[1bf]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1c1]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1bc]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[115]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_timeouts
</UL>

<P><STRONG><a name="[2bc]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>ulTaskNotifyTake</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[1ea]"></a>xTaskNotifyWait</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[1eb]"></a>xTaskGenericNotify</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[1ec]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[1ed]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[1ee]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1d2]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1ef]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1e4]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1e6]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[1b8]"></a>vPortYield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[10f]"></a>vPortEnterCritical</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[110]"></a>vPortExitCritical</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[14]"></a>xPortSysTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Task
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>pvPortMalloc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[1cd]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[2bd]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1d0]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[1d3]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1d9]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1d5]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1a0]"></a>COMM_Putc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSent
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
</UL>

<P><STRONG><a name="[1f4]"></a>COMM_Puts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = COMM_Puts &rArr; USART1_PutString &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
</UL>

<P><STRONG><a name="[1b4]"></a>COMM_CarrierDetected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[1f6]"></a>MODEM_RTS_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_Wakeup
</UL>

<P><STRONG><a name="[1f8]"></a>MODEM_RTS_Clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_Wakeup
</UL>

<P><STRONG><a name="[2bf]"></a>MODEM_DTR_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>MODEM_DTR_Clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[b5]"></a>MODEM_MOSFET_On</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[217]"></a>MODEM_MOSFET_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[21a]"></a>MODEM_POWER_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[21e]"></a>MODEM_POWER_Clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[219]"></a>MODEM_RESET_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[21f]"></a>MODEM_RESET_Clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[a4]"></a>MODEM_Wakeup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MODEM_Wakeup &rArr; SysTick_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RTS_Clr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RTS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[1f9]"></a>MODEM_UartInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MODEM_UartInit &rArr; USART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[8c]"></a>Ampm_CallTask_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_CallTask_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[80]"></a>Ampm_VoiceCallCheckList_IsEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_VoiceCallCheckList_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_IsIdle
</UL>

<P><STRONG><a name="[cf]"></a>Ampm_VoiceCallSetAction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
</UL>

<P><STRONG><a name="[a0]"></a>Ampm_VoiceCallStartRecvCall</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[1fb]"></a>Ampm_VoiceCallAdd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_VoiceCallAdd &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallSetup
</UL>

<P><STRONG><a name="[d0]"></a>Ampm_VoiceCallCancel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_VoiceCallCancel &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
</UL>

<P><STRONG><a name="[d2]"></a>Ampm_VoiceCallSetup</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ampm_VoiceCallSetup &rArr; Ampm_VoiceCallAdd &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
</UL>

<P><STRONG><a name="[ac]"></a>Ampm_CallTaskPeriodic_1Sec</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_CallTaskPeriodic_1Sec
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[92]"></a>Ampm_CallTask</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_CallTask &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[62]"></a>Ampm_GsmVoiceCallCheckCeerEndCallback</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Ampm_GsmVoiceCallCheckCeerEndCallback &rArr; DTMF_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>Ampm_GsmVoiceCallCheckStateEndCallback</STRONG> (Thumb, 686 bytes, Stack size 80 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Ampm_GsmVoiceCallCheckStateEndCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_DeInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>Ampm_GsmCallEndCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Ampm_GsmCallEndCallback &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>Ampm_GsmATM1EndCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmATM1EndCallback &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>Ampm_GsmCallDialEndCallback</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmCallDialEndCallback &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>Ampm_GsmCHLD_1X_Callback</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmCHLD_1X_Callback &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>Ampm_GsmCallDialStartCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmCallDialStartCallback &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>Ampm_CallListSetEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>Ampm_GetCeer</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ampm_gsm_call.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>Ampm_GetListOfCurrentCall</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_GetListOfCurrentCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_call.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>Ampm_ComparePhoneNumber_1</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ampm_gsm_call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[ce]"></a>Ampm_ComparePhoneNumber</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_ComparePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
</UL>

<P><STRONG><a name="[50]"></a>Ampm_GsmGetCSQ</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ampm_gsm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Ampm_GsmGetCSQ &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ampm_gsm_common.o(.constdata)
<LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>DialupAtCallback0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DialupAtCallback0 &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_dial_up.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>Ampm_GSM_DialUp_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSwithToIdle
</UL>

<P><STRONG><a name="[9b]"></a>Ampm_GSM_DialUp_IsOk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[9a]"></a>Ampm_GSM_DialUp_IsDone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[99]"></a>Ampm_GSM_DialUp</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GSM_DialUp &rArr; Ampm_SendAtCmd &rArr; Ampm_SendCmd &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[a5]"></a>Ampm_GsmGotoCmdMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[2c0]"></a>Ampm_GsmGotoDataMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>Ampm_GsmSetApn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
</UL>

<P><STRONG><a name="[a3]"></a>Ampm_SendAtCheck_IsEmpty</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdCheck_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[209]"></a>Ampm_AtCmdCheckResponse</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ampm_gsm_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
</UL>

<P><STRONG><a name="[20a]"></a>Ampm_SendCommand</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, ampm_gsm_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[51]"></a>Ampm_SetCmdOK</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>Ampm_SendAtCmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_SendAtCmd &rArr; Ampm_SendCmd &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_StartRecvSms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[7c]"></a>Ampm_SendAtCmdNow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmMainATPhaseFinished
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSent
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CSCA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGF
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCHLD_1X_Callback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallDialEndCallback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmATM1EndCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
</UL>

<P><STRONG><a name="[5a]"></a>Ampm_GsmRecvCallback</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ampm_GsmRecvCallback &rArr; StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
</UL>
<BR>[Address Reference Count : 6]<UL><LI> ampm_gsm_main_task.o(.constdata)
<LI> ampm_gsm_call.o(.constdata)
<LI> ampm_gsm_common.o(.constdata)
<LI> ampm_gsm_dial_up.o(.constdata)
<LI> ampm_gsm_io.o(.text)
<LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>Ampm_GsmSendCallback</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmSendCallback &rArr; COMM_Puts &rArr; USART1_PutString &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserInit
</UL>
<BR>[Address Reference Count : 6]<UL><LI> ampm_gsm_main_task.o(.constdata)
<LI> ampm_gsm_call.o(.constdata)
<LI> ampm_gsm_common.o(.constdata)
<LI> ampm_gsm_dial_up.o(.constdata)
<LI> ampm_gsm_io.o(.text)
<LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>Ampm_CmdTask_SendCmd</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_CmdTask_SendCmd &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[aa]"></a>Ampm_RingingTimer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[7e]"></a>Ampm_Ringing_GetPhase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_IsIdle
</UL>

<P><STRONG><a name="[9c]"></a>Ampm_RingingDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[96]"></a>Ampm_RingingEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[8a]"></a>Ampm_RingingReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[e5]"></a>Ampm_SetRinging</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>Ampm_SetAtRing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_RING_Process
</UL>

<P><STRONG><a name="[220]"></a>Ampm_SetAtClip</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_CLIP_Process
</UL>

<P><STRONG><a name="[215]"></a>Ampm_SetAtCmti</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_Process
</UL>

<P><STRONG><a name="[a7]"></a>Ampm_RingingProcess</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[72]"></a>Ampm_GsmSmsSendCallback_CMGF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmSmsSendCallback_CMGF &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>Ampm_GsmSmsSendCallback_CSCA</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmSmsSendCallback_CSCA &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>Ampm_GsmSmsSent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmSmsSent &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>Ampm_GsmCREG</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_sms.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>Ampm_GsmSmsSendMessageCallback</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Ampm_GsmSmsSendMessageCallback &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>Ampm_GsmSmsSendCallback_CMGS</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Ampm_GsmSmsSendCallback_CMGS &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>Ampm_GsmSmsRecvCallback_CMGR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmSmsRecvCallback_CMGR &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>Ampm_GsmSmsRecvCallback_CMGD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmSmsRecvCallback_CMGD &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>Ampm_GsmSmsRecv0</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmSmsRecv0 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>Ampm_GsmSmsRecv1</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ampm_GsmSmsRecv1 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>Ampm_GsmSmsRecv2</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmSmsRecv2 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>Ampm_StartRecvSms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_StartRecvSms &rArr; Ampm_SendAtCmd &rArr; Ampm_SendCmd &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[90]"></a>Ampm_RecvSms_IsFinished</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_RecvSms_IsFinished &rArr; Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[88]"></a>Ampm_SmsTask_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_SmsTask_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[ab]"></a>Ampm_SmsTaskPeriodic_1Sec</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SmsTaskPeriodic_1Sec &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[91]"></a>Ampm_SmsTask</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_SmsTask &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[7f]"></a>Ampm_SmsCheckMessage_IsEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_SmsCheckMessage_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Gsm_IsIdle
</UL>

<P><STRONG><a name="[214]"></a>Ampm_SmsAddMsg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_SmsAddMsg &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
</UL>

<P><STRONG><a name="[e4]"></a>Ampm_Sms_SendMsg</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ampm_Sms_SendMsg &rArr; Ampm_SmsAddMsg &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
</UL>

<P><STRONG><a name="[76]"></a>Ampm_SMS_ReadMsg</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, ampm_gsm_sms.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>Ampm_GetServiceCenterNumber</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_GetServiceCenterNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>Ampm_SMS_URC_Incomming</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SMS_URC_Incomming &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>Ampm_SMS_Process</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SMS_Process &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtCmti
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>Ampm_SendSmsPolling</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, ampm_gsm_sms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[8b]"></a>AMPM_GSM_Startup_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AMPM_GSM_Startup_Init &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[21d]"></a>Ampm_GSM_GetSimCID</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ampm_gsm_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[21c]"></a>Ampm_GSM_GetIMEI</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ampm_gsm_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>AMPM_GSM_Startup</STRONG> (Thumb, 824 bytes, Stack size 40 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AMPM_GSM_Startup &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_On
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_UartInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RESET_Clr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RESET_Set
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Clr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Set
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_Off
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_DTR_Clr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[73]"></a>Ampm_URC_CLIP_Process</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_URC_CLIP_Process &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtClip
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>Ampm_URC_RING_Process</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_URC_RING_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[222]"></a>AT_CmdProcessInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AT_CmdProcessInit &rArr; StrParserInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
</UL>

<P><STRONG><a name="[223]"></a>AT_ComnandParser</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AT_ComnandParser &rArr; StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdProcessInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>pdu_encode</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdu_encode &rArr; EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePDUMessage
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
</UL>

<P><STRONG><a name="[210]"></a>pdu16_encode</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdu16_encode &rArr; EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
</UL>

<P><STRONG><a name="[226]"></a>pdu_decode</STRONG> (Thumb, 308 bytes, Stack size 112 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePhoneNumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePDUMessage
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapDecimalNibble
</UL>

<P><STRONG><a name="[22b]"></a>TPM3_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dtmf_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_DeInit
</UL>

<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dtmf_app.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22c]"></a>TPM3_Init</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, dtmf_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TPM3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Init
</UL>

<P><STRONG><a name="[1fd]"></a>DTMF_DeInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, dtmf_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DTMF_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM3_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCHLD_1X_Callback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallEndCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckCeerEndCallback
</UL>

<P><STRONG><a name="[201]"></a>DTMF_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dtmf_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DTMF_Init &rArr; TPM3_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM3_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
</UL>

<P><STRONG><a name="[e6]"></a>DTMF_Task</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dtmf_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DTMF_Task &rArr; DTMF_Detect &rArr; DTMF_digit &rArr; Goertzel
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Detect
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[22f]"></a>gmtime_r</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, m_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGsm
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[22e]"></a>localtime_r</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[229]"></a>mktime</STRONG> (Thumb, 1200 bytes, Stack size 44 bytes, m_time.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGsm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[230]"></a>TIME_GetSec</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_AddSec
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSetup
</UL>

<P><STRONG><a name="[231]"></a>SysTimeSetup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
</UL>

<P><STRONG><a name="[2c1]"></a>UpdateRtcTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys_time.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>TIME_FromGsm</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[233]"></a>TIME_FromSec</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_AddSec
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[234]"></a>TIME_AddSec</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
</UL>

<P><STRONG><a name="[8d]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdResetList
</UL>

<P><STRONG><a name="[192]"></a>list_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
</UL>

<P><STRONG><a name="[2c2]"></a>list_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>list_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[19b]"></a>list_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ampm_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCancel
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_unregister
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[1fc]"></a>list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ampm_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdAddToList
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallAdd
</UL>

<P><STRONG><a name="[236]"></a>list_push</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, ampm_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>

<P><STRONG><a name="[2c3]"></a>list_chop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ampm_list.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>list_pop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
</UL>

<P><STRONG><a name="[1fa]"></a>list_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_VoiceCallCheckList_IsEmpty
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
</UL>

<P><STRONG><a name="[237]"></a>list_insert</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ampm_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
</UL>

<P><STRONG><a name="[193]"></a>list_item_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTaskPeriodic_1Sec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
</UL>

<P><STRONG><a name="[239]"></a>ampm_f_putc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_sprintf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_puts
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>

<P><STRONG><a name="[238]"></a>ampm_f_puts</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>

<P><STRONG><a name="[20f]"></a>ampm_vsprintf</STRONG> (Thumb, 686 bytes, Stack size 84 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_puts
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>

<P><STRONG><a name="[202]"></a>ampm_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendMessageCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialupAtCallback0
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallDialStartCallback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCHLD_1X_Callback
</UL>

<P><STRONG><a name="[ad]"></a>InitFindData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, data_cmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitFindData
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
</UL>

<P><STRONG><a name="[ae]"></a>FindData</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, data_cmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
</UL>

<P><STRONG><a name="[22d]"></a>DTMF_Detect</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, dtmf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DTMF_Detect &rArr; DTMF_digit &rArr; Goertzel
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_digit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GainControl
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Task
</UL>

<P><STRONG><a name="[213]"></a>RINGBUF_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Init
</UL>

<P><STRONG><a name="[1fe]"></a>RINGBUF_Put</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Task
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_Process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_URC_Incomming
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>RINGBUF_Get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>RINGBUF_GetFill</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
</UL>

<P><STRONG><a name="[23e]"></a>Ampm_CmdAddToList</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sparser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[23f]"></a>Ampm_CmdResetList</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sparser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[2c4]"></a>Ampm_CmdCheckList_IsEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sparser.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>Ampm_CmdCheck_IsEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
</UL>

<P><STRONG><a name="[9f]"></a>Ampm_CmdTask_IsIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
</UL>

<P><STRONG><a name="[20b]"></a>Ampm_SendCmd</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_SendCmd &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
</UL>

<P><STRONG><a name="[20c]"></a>Ampm_SendCmdNow</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_SendCmdNow &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>

<P><STRONG><a name="[a6]"></a>Ampm_Cmd_Task</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_Cmd_Task &rArr; CheckTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[20e]"></a>StrParserInit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrParserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdProcessInit
</UL>

<P><STRONG><a name="[241]"></a>StrParserCtl</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrParserCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
</UL>

<P><STRONG><a name="[20d]"></a>StrComnandParser</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
</UL>

<P><STRONG><a name="[2c5]"></a>SysTick_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>SysTick_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>SysTick_Task</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sys_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[a1]"></a>SysTick_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Timer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermReq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelayms
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
</UL>

<P><STRONG><a name="[2c7]"></a>SysTick_Get64</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>SysTick_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_Wakeup
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
</UL>

<P><STRONG><a name="[a9]"></a>InitTimeout</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGR
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallDialEndCallback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmCallEndCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
</UL>

<P><STRONG><a name="[a8]"></a>CheckTimeout</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CallTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
</UL>

<P><STRONG><a name="[242]"></a>TimerDelayms</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, sys_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>

<P><STRONG><a name="[243]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[245]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[f3]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2c8]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[246]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[2d9]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskDeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[f4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2ea]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[2eb]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>USART1_Init</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_UartInit
</UL>

<P><STRONG><a name="[2f2]"></a>USART1_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>USART1_PutChar</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutString
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>

<P><STRONG><a name="[1f5]"></a>USART1_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_PutString &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
</UL>

<P><STRONG><a name="[2f3]"></a>USART1_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART1_IRQHandler &rArr; AT_ComnandParser &rArr; StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24a]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounterX
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[249]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounterX
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[248]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[24c]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>RTC_SetCounter</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RTCAlarm_IRQHandler &rArr; TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24d]"></a>RTC_SanityCheck</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[b6]"></a>RTC_Init</STRONG> (Thumb, 192 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SanityCheck
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[24e]"></a>RTC_SetCounterX</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>

<P><STRONG><a name="[f2]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskDeInit
</UL>

<P><STRONG><a name="[f7]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2f4]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[fa]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2f5]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[fe]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[ff]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[100]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[101]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2f6]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2f9]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[309]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[f6]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[30d]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[30e]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[103]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[311]"></a>DMA_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>USART3_Init</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[313]"></a>USART3_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>USART3_PutChar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutString
</UL>

<P><STRONG><a name="[24f]"></a>USART3_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>

<P><STRONG><a name="[314]"></a>USART3_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[315]"></a>SPI_InitLowFreq</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>SPI_InitHighFreq</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
</UL>

<P><STRONG><a name="[316]"></a>SPI_DeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>halSpiWriteByte</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__GlobalProtect
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteDisable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[317]"></a>halSpiWriteMutilByte</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>halSpiReadMutilByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[319]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[252]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[253]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[27]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[254]"></a>SST25_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SST25_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitHighFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_init
</UL>

<P><STRONG><a name="[259]"></a>SST25_Erase</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_erase_sector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
</UL>

<P><STRONG><a name="[25a]"></a>__SST25_Write</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
</UL>

<P><STRONG><a name="[25b]"></a>_SST25_Write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
</UL>

<P><STRONG><a name="[25c]"></a>_SST25_Read</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
</UL>

<P><STRONG><a name="[25d]"></a>SST25_Write</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_write
</UL>

<P><STRONG><a name="[25f]"></a>SST25_Read</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
</UL>

<P><STRONG><a name="[263]"></a>_ampm_f_file_format_check</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ampm_f_file_format_check &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_ff_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_next_sector
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_lseek
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_searchfile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_disk_cleanup
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
</UL>

<P><STRONG><a name="[265]"></a>ampm_flash_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_close
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_read
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_next_sector
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_lseek
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_unlink
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_searchfile
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_getfree
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_find_free_sector
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_disk_cleanup
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
</UL>

<P><STRONG><a name="[266]"></a>ampm_f_file_format_check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ampm_f_file_format_check &rArr; ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_unlink
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_searchfile
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_getfree
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_find_free_sector
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_disk_cleanup
</UL>

<P><STRONG><a name="[267]"></a>ampm_f_disk_cleanup</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ampm_f_disk_cleanup &rArr; ampm_f_file_format_check &rArr; ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_init
</UL>

<P><STRONG><a name="[bb]"></a>ampm_f_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ampm_f_init &rArr; ampm_f_disk_cleanup &rArr; ampm_f_file_format_check &rArr; ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_disk_cleanup
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[268]"></a>ampm_flash_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ampm_flash_write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_close
</UL>

<P><STRONG><a name="[269]"></a>ampm_f_disk_format</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_erase_sector
</UL>

<P><STRONG><a name="[bc]"></a>ampm_f_open</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ampm_f_open &rArr; ampm_flash_write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_write
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_ff_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[26b]"></a>ampm_f_find_free_sector</STRONG> (Thumb, 110 bytes, Stack size 88 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ampm_f_find_free_sector &rArr; ampm_f_file_format_check &rArr; ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_write
</UL>

<P><STRONG><a name="[26c]"></a>ampm_f_getfree</STRONG> (Thumb, 50 bytes, Stack size 80 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
</UL>

<P><STRONG><a name="[26d]"></a>ampm_f_searchfile</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
</UL>

<P><STRONG><a name="[26e]"></a>ampm_f_unlink</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_file_format_check
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_erase_sector
</UL>

<P><STRONG><a name="[bd]"></a>ampm_f_close</STRONG> (Thumb, 226 bytes, Stack size 88 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ampm_f_close &rArr; ampm_flash_write &rArr; SST25_Write &rArr; _SST25_Write &rArr; __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_ff_checksum
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[26f]"></a>ampm_f_lseek</STRONG> (Thumb, 84 bytes, Stack size 96 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
</UL>

<P><STRONG><a name="[270]"></a>ampm_f_next_sector</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_read
</UL>

<P><STRONG><a name="[271]"></a>ampm_f_read</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_next_sector
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_read
</UL>

<P><STRONG><a name="[bf]"></a>ampm_f_write</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ampm_f_write &rArr; ampm_f_find_free_sector &rArr; ampm_f_file_format_check &rArr; ampm_flash_read &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_find_free_sector
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_flash_write
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_ff_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_printf
</UL>

<P><STRONG><a name="[273]"></a>ampm_f_printf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ampm_ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[31a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[31b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_find_free_sector
</UL>

<P><STRONG><a name="[31c]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__CheckLCPOptions
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigAck
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermAck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendEchoReply
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_reallocm
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_CLIP_Process
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
</UL>

<P><STRONG><a name="[31e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_write
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[321]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[323]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[21b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[17b]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
</UL>

<P><STRONG><a name="[be]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_send_str
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber_1
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
</UL>

<P><STRONG><a name="[17d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_lookup
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_unlink
</UL>

<P><STRONG><a name="[25e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
</UL>

<P><STRONG><a name="[19e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetAuthentication
</UL>

<P><STRONG><a name="[1ff]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmVoiceCallCheckStateEndCallback
</UL>

<P><STRONG><a name="[276]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[28f]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[28e]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[27c]"></a>_scanf_really_real</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[285]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[324]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[287]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[281]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[325]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[275]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[53]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[326]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[286]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[283]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[282]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[27b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[327]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[289]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[28d]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[328]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32a]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask1
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGSM_GPRS_Task
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[32b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[32c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[292]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32d]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_printf
</UL>

<P><STRONG><a name="[32e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[32f]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[293]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[330]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[331]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[332]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[106]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
</UL>

<P><STRONG><a name="[cb]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[c8]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAmpmNetTestTask4
</UL>

<P><STRONG><a name="[333]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[334]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[335]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[27d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b1]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
</UL>

<P><STRONG><a name="[b2]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
</UL>

<P><STRONG><a name="[44]"></a>sswt_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sswt_handler &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>recv_tcp</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = recv_tcp &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>poll_tcp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = poll_tcp &rArr; sys_sem_signal &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>sent_tcp</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sent_tcp &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>err_tcp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = err_tcp &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[0]"></a>do_newconn</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = do_newconn &rArr; tcp_new &rArr; tcp_alloc &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>do_delconn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_delconn &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>do_bind</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_bind &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>do_connected</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_connected &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>do_connect</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = do_connect &rArr; tcp_new &rArr; tcp_alloc &rArr; memp_malloc &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_connect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>do_disconnect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_disconnect &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>do_listen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_listen &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>do_accept</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, api_msg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>do_send</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_send &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>do_recv</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_recv &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>do_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>do_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = do_close &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.data)
</UL>
<P><STRONG><a name="[13e]"></a>plug_holes</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[143]"></a>pbuf_pool_alloc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[14b]"></a>get_socket</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[14a]"></a>alloc_socket</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = alloc_socket &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[4a]"></a>event_callback</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = event_callback &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>lwip_selscan</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[160]"></a>lwip_standard_chksum</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[168]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[16b]"></a>upper_layer_chksum</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[170]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[178]"></a>parse_name</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[175]"></a>check_entries</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_entries &rArr; uip_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[177]"></a>newdata</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = newdata &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[18f]"></a>call_event</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = call_event
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acked
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
</UL>

<P><STRONG><a name="[18e]"></a>senddata</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = senddata &rArr; uip_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_event
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
</UL>

<P><STRONG><a name="[190]"></a>acked</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = acked &rArr; call_event
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
</UL>

<P><STRONG><a name="[191]"></a>newdata</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcpip_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = newdata &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; sys_sem_wait &rArr; sys_arch_sem_wait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
</UL>

<P><STRONG><a name="[194]"></a>relisten</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_appcall
</UL>

<P><STRONG><a name="[196]"></a>init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpip_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[4c]"></a>tcp_recv_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpip_rtos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcpip_rtos.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>PPP__SendEchoReply</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PPP__SendEchoReply &rArr; PPP_Send &rArr; COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a2]"></a>PPP__SendTermReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PPP__SendTermReq
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a3]"></a>PPP__ThisLayerDown</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = PPP__ThisLayerDown &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ReInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1ac]"></a>PPP__SendCodeRej</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a5]"></a>PPP__SendConfigReq</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a6]"></a>PPP__SendTermAck</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PPP__SendTermAck &rArr; PPP_Send &rArr; COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a7]"></a>PPP__SendConfigNackRej</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PPP__SendConfigNackRej &rArr; PPP_Send &rArr; COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a8]"></a>PPP__SendConfigAck</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PPP__SendConfigAck &rArr; PPP_Send &rArr; COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a9]"></a>PPP__ThisLayerUp</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_SetHostAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1aa]"></a>PPP__ThisLayerFinished</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = PPP__ThisLayerFinished &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1ab]"></a>PPP__ThisLayerStarted</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[1a4]"></a>PPP__ManageState</STRONG> (Thumb, 1292 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PPP__ManageState &rArr; PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerStarted
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerFinished
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerUp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigAck
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigNackRej
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermAck
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendCodeRej
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermReq
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendEchoReply
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Timer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerFinished
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerUp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
</UL>

<P><STRONG><a name="[1ad]"></a>PPP__CheckLCPOptions</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PPP__CheckLCPOptions &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
</UL>

<P><STRONG><a name="[1ae]"></a>PPP__ProcessPacket</STRONG> (Thumb, 590 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PPP__ProcessPacket &rArr; PPP__ManageState &rArr; PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__CheckLCPOptions
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Input
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
</UL>

<P><STRONG><a name="[1b1]"></a>PPP__Timer</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PPP__Timer &rArr; PPP__ManageState &rArr; PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[1b2]"></a>PPP__Open</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PPP__Open &rArr; PPP__ManageState &rArr; PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[1bb]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1bd]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1be]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1c8]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1c9]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[1ce]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1cf]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1d1]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1d6]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[1d8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1e0]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[1e2]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[1e3]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4d]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>prvTaskExitError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[1f2]"></a>prvHeapInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heap_2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[228]"></a>SwapDecimalNibble</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[225]"></a>EncodePDUMessage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncodePDUMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
</UL>

<P><STRONG><a name="[22a]"></a>DecodePDUMessage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[224]"></a>EncodePhoneNumber</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
</UL>

<P><STRONG><a name="[227]"></a>DecodePhoneNumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[23b]"></a>Goertzel</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dtmf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Goertzel
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_digit
</UL>

<P><STRONG><a name="[23d]"></a>GainControl</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, dtmf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GainControl
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Detect
</UL>

<P><STRONG><a name="[23c]"></a>chk_valid</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dtmf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_digit
</UL>

<P><STRONG><a name="[23a]"></a>DTMF_digit</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, dtmf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DTMF_digit &rArr; Goertzel
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_valid
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goertzel
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF_Detect
</UL>

<P><STRONG><a name="[251]"></a>SetSysClockTo48</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[250]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[256]"></a>SST25__Status</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__GlobalProtect
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteDisable
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
</UL>

<P><STRONG><a name="[258]"></a>SST25__WriteEnable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
</UL>

<P><STRONG><a name="[260]"></a>SST25__WriteDisable</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[261]"></a>SST25__GlobalProtect</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[262]"></a>ampm_flash_erase_sector</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ampm_flash_erase_sector &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_close
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_unlink
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_disk_format
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_disk_cleanup
</UL>

<P><STRONG><a name="[264]"></a>ampm_ff_checksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ampm_ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ampm_ff_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_close
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ampm_f_file_format_check
</UL>

<P><STRONG><a name="[295]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[291]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[298]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[297]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[58]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[294]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[278]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[55]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
